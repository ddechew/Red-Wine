import os

from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QPushButton, QLabel,
    QFileDialog, QMessageBox
)
from ui.inspect_window import InspectWindow
from ui.predictor_window import PredictorWindow
import pandas as pd
from ui.analysis_window import AnalysisWindow
from models.wine_analyzer import WineAnalyzer
from ui.true_positives_window import TruePositivesWindow
from models.predictor import WinePredictor

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–°—ä–≤–µ—Ç–Ω–∏–∫ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ—Ç–æ –Ω–∞ —á–µ—Ä–≤–µ–Ω–æ –≤–∏–Ω–æ - Kaufland")
        self.setGeometry(200, 200, 600, 400)

        icon_path = os.path.join(os.path.dirname(__file__), "..", "assets", "kaufland_logo.ico")
        self.setWindowIcon(QIcon(icon_path))


        self.df = None

        central_widget = QWidget()
        layout = QVBoxLayout()

        self.import_button = QPushButton("üìÇ –ò–º–ø–æ—Ä—Ç–∏—Ä–∞–π CSV —Ñ–∞–π–ª")
        self.import_button.clicked.connect(self.import_csv)
        layout.addWidget(self.import_button)

        self.inspect_button = QPushButton("üëÅÔ∏è –ü—Ä–µ–≥–ª–µ–¥–∞–π –¥–∞–Ω–Ω–∏—Ç–µ")
        self.inspect_button.setEnabled(False)
        self.inspect_button.clicked.connect(self.open_inspect_window)
        layout.addWidget(self.inspect_button)

        self.analysis_button = QPushButton("üìà –ê–Ω–∞–ª–∏–∑ –Ω–∞ –º–æ–¥–µ–ª–∞")
        self.analysis_button.setEnabled(False)
        self.analysis_button.clicked.connect(self.open_analysis_window)
        layout.addWidget(self.analysis_button)

        self.tp_button = QPushButton("‚úÖ –ü—Ä–µ–≥–ª–µ–¥–∞–π –Ω–∞–π-–¥–æ–±—Ä–∏—Ç–µ –≤–∏–Ω–∞")
        self.tp_button.setEnabled(False)
        self.tp_button.clicked.connect(self.open_true_positives)
        layout.addWidget(self.tp_button)

        self.predictor_button = QPushButton("ü§ñ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–∞–π –∫–∞—á–µ—Å—Ç–≤–æ")
        self.predictor_button.setEnabled(False)
        self.predictor_button.clicked.connect(self.open_predictor_window)
        layout.addWidget(self.predictor_button)

        self.status_label = QLabel("–ú–æ–ª—è, –∏–º–ø–æ—Ä—Ç–∏—Ä–∞–π—Ç–µ CSV —Ñ–∞–π–ª –∑–∞ –Ω–∞—á–∞–ª–æ.")
        layout.addWidget(self.status_label)

        central_widget.setLayout(layout)
        self.setCentralWidget(central_widget)

    def import_csv(self):
        file_path, _ = QFileDialog.getOpenFileName(
            self, "–ò–∑–±–µ—Ä–∏ CSV —Ñ–∞–π–ª", "", "CSV —Ñ–∞–π–ª–æ–≤–µ (*.csv);;–í—Å–∏—á–∫–∏ —Ñ–∞–π–ª–æ–≤–µ (*)"
        )
        if file_path:
            try:
                self.df = pd.read_csv(file_path, sep=";")
                # ‚úÖ Initialize WineAnalyzer here
                self.analyzer = WineAnalyzer(file_path)
                self.analyzer.load_and_prepare_data()
                self.analyzer.train_model()

                self.status_label.setText(f"üìÑ –ó–∞—Ä–µ–¥–µ–Ω —Ñ–∞–π–ª: {file_path}")
                self.inspect_button.setEnabled(True)
                self.predictor_button.setEnabled(True)
                self.analysis_button.setEnabled(True)
                self.tp_button.setEnabled(True)
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "CSV —Ñ–∞–π–ª—ä—Ç –µ –∑–∞—Ä–µ–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            except Exception as e:
                QMessageBox.critical(self, "–ì—Ä–µ—à–∫–∞", f"–ü—Ä–æ–±–ª–µ–º –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ: {str(e)}")

    def open_inspect_window(self):
        if self.df is not None:
            self.inspect_window = InspectWindow(self.df)
            self.inspect_window.show()

    def open_predictor_window(self):
        if self.df is not None:
            # Use the same path that was used to initialize WineAnalyzer
            csv_path = self.analyzer.csv_path
            predictor = WinePredictor(csv_path)
            self.predictor_window = PredictorWindow(predictor)
            self.predictor_window.show()

    def open_analysis_window(self):
        if self.df is not None:
            self.analysis_window = AnalysisWindow(self.analyzer)
            self.analysis_window.show()

    def open_true_positives(self):
        if hasattr(self, 'analyzer'):
            self.tp_window = TruePositivesWindow(self.analyzer)
            self.tp_window.show()
